// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 프리즈마 init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // .env에 DATABASE_URL이 자동으로 연결
  // 일단 railway로 연결(supabase도 가능)
  // 조금 더 공부해서 도커로 연결해보기
  url      = env("DATABASE_URL")
}

// 프리즈마 어스페이지 스키마
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 복호화된 비밀번호를 저장할 필드 추가
// hashedPassword String?
// 시간을 저장할 필드 추가
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
model User {
  id             String    @id @default(cuid())
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  userType    UserType  @default(USER)
  Product     Product[]
  favoriteIds String[]
}

// 관리자 유저 타입 추가
enum UserType {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  imageSrc    String
  category    String
  userId      String
  price       Int
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
